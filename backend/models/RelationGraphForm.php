<?php
/**
 * Created by PhpStorm.
 * User: mjz
 * Date: 17/10/14
 * Time: 下午7:45
 */

namespace backend\models;


use common\models\records\NormalUserInfo;
use yii\base\Model;
use yii\db\Query;

class RelationGraphForm extends Model
{
    // 获取和此用户相关的数据
    public $user_id;
    // 系谱图的层数
    // 当前用户的节点向上追踪层数
    public $up_level = 0;
    // 向下追踪的层数
    public $down_level = 4;

    public function rules()
    {
        return [
            // name, email, subject and body are required
            [['user_id'], 'required'],
            [['user_id', 'up_level', 'down_level'], 'integer'],
        ];
    }

    public function attributeLabels()
    {
        return [
            'user_id' => '用户ID',
            'up_level' => '上级层数',
            'down_level' => '下级层数',
        ]; // TODO: Change the autogenerated stub
    }

    /**
     * 根据当前配置，找到二叉树中的根节点
     * @return array 根节点的user_id
     */
    private function findRootBroker()
    {
        $leafUserId = $this->user_id;
        $level = 0;
        for ($i = $this->up_level; $i > 0;) {
            $subQuery = (new Query())->select('broker_id')
                ->from(NormalUserInfo::tableName())
                ->where(['user_id' => $leafUserId]);

            $query = new Query();
            $query->select('user_id, broker_id, broker_path')
                ->from(NormalUserInfo::tableName())
                ->where(['user_id' => $subQuery]);

            $row = $query->one();
            $leafUserId = $row['broker_id'];
            $i -= strlen($row['broker_path']);
            if ($i <= 0) {
                $level = $this->up_level + (-$i);
            }
        }
        return [$leafUserId, $level];
    }

    /**
     *
     * @return array 按照层级返回的数据
     */
    public function getData()
    {
        // 查找此二叉树中的根节点
        list($rootUserId, $up_level) = $this->findRootBroker();
        // 树高
        $treeLevel = $up_level + $this->down_level;
        return $this->treeData($rootUserId, $treeLevel);
    }

    public function genPath($path, $i, $leafData) {
        if (strlen($path) == $i + 1) {
            return $leafData;
        }
        else {
            $pos = $path[$i+1];
            $data[$pos] = $this->genPath($path, $i+1, $leafData);
            return ['user_id' => 0, 'child'=> $data];
        }
    }

    /**
     * @param integer $rootUserId 树的根节点
     * @param integer $treeLevel  树高
     * @return array
     */
    private function treeData($rootUserId, $treeLevel)
    {
        $data = [];
        // 向下, 查找子节点
        $userInfoModels = [['user_id' => 1, 'broker_path' => '010'], ['user_id' => 2, 'broker_path' => '1101']];
        foreach ($userInfoModels as $userInfoModel) {
            $path = $userInfoModel['broker_path'];
            $leaf_user_id = $userInfoModel['user_id'];
            $k = $treeLevel - strlen($path);
            // 只展示父节点与有效叶子节点之间的无效节点
            if ($k >= 0) {
                $leaf_data = $this->treeData($leaf_user_id, $k);
                $data = array_merge($data, [$path[0] => $this->genPath(substr($path, 0, $treeLevel), 0, $leaf_data)]);
            }
        }

        return ['user_id' => $rootUserId, 'child' => $data];
    }

    private function _constructTreantData($originData, $parentBroker)
    {
        $data = [];
        $data['text'] = ['user_id' => $originData['user_id'], 'parent_broker' => $parentBroker];
        $data['HTMLid'] = 'user_' . $originData['user_id'];
        ksort($originData['child']);

        $childDataArr = $originData['child'];
        if (!empty($childDataArr)) {
            if (empty($childDataArr['0'])) {
                $childDataArr['0'] = ['user_id' => 0, 'child' => []];
            } else if (empty($childDataArr['1'])) {
                $childDataArr['1'] = ['user_id' => 0, 'child' => []];
            }
        }

        foreach ($childDataArr as $childData) {
            $data['children'][] = $this->_constructTreantData($childData, $originData['user_id']);
        }
        return $data;
    }

    /**
     *
     * @return array 返回treat格式的数据
     */
    public function getTreantData()
    {
        $originData = $this->getData();
        // 将数据转换成前端treant需要的格式
        return $this->_constructTreantData($originData, 0);
    }

    public function formName()
    {
        return ''; // TODO: Change the autogenerated stub
    }
}