<?php

namespace common\models\records;

use common\helpers\TransactionHelper;
use Exception;
use Yii;

/**
 * This is the model class for table "{{%recharge_log}}".
 *
 * @property integer $id
 * @property integer $user_id
 * @property integer $amount
 * @property integer $create_time
 * @property string $date
 * @property integer $status
 * @property integer $baodan_status
 */
class RechargeLog extends \yii\db\ActiveRecord
{

    // 审核中
    const STATUS_CHECKING = 0;
    // 通过
    const STATUS_APPROVE = 1;
    // 未通过
    const STATUS_REJECT = 2;

    private static $STATUS_ARR = [
        RechargeLog::STATUS_CHECKING => '审核中',
        RechargeLog::STATUS_APPROVE => '审核通过',
        RechargeLog::STATUS_REJECT => '拒绝',
    ];

    private $_user;

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%recharge_log}}';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['user_id'], 'required'],
            [['user_id', 'amount', 'create_time', 'status', 'baodan_status'], 'integer'],
            [['date'], 'safe'],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'user_id' => 'User ID',
            'amount' => '兑现金额',
            'create_time' => 'Create Time',
            'date' => 'Date',
            'status' => '公司财务是否审核，0 未审核， 已审核',
            'baodan_status' => '上级是否审核，0 未审核， 已审核',
        ];
    }

    public function getUser()
    {
        if ($this->_user == null) {
            $this->_user = $this->hasOne(User::className(), ['id' => 'user_id']);
        }
        return $this->_user;
    }

    public function getStatusText()
    {
        return static::$STATUS_ARR[$this->status];
    }

    public function getBaodanStatusText()
    {
        return static::$STATUS_ARR[$this->baodan_status];
    }

    public function beforeSave($insert)
    {
        $result = parent::beforeSave($insert);
        if ($result && $insert) {
            $this->status = static::STATUS_CHECKING;
            $this->baodan_status = static::STATUS_CHECKING;
            if (empty($this->create_time)) {
                $this->create_time = time();
            }
            if (empty($this->date)) {
                $this->date = date('Ymd', $this->create_time);
            }
        }
        return $result; // TODO: Change the autogenerated stub
    }

    /**
     * @param $rechargeLog static
     */
    private static function approve($rechargeLog)
    {
        $rechargeLog->status = RechargeLog::STATUS_APPROVE;

        // 增加一条交易记录
        $transactionLog = new TransactionLog();
        $transactionLog->user_id = $rechargeLog->user_id;
        $transactionLog->amount = $rechargeLog->amount;
        $transactionLog->currency_type = TransactionHelper::CURRENCY_JIANGJIN;
        $transactionLog->transaction_type = TransactionHelper::TRANSACTION_RECHARGE;
        $transactionLog->create_time = time();
        $transactionLog->date = date('Y-m-d', $transactionLog->create_time);
        $transactionLog->from_admin_id = \Yii::$app->user->identity->getId();

        // 钱包增加金额
        $wallet = Wallet::getValidWallet($rechargeLog->user_id);
        $wallet->jiangjin += $rechargeLog->amount;

        $db = \Yii::$app->db;
        $dbTransaction = $db->beginTransaction();
        try {
            $rechargeLog->update();
            $transactionLog->save();
            $wallet->update();

            $dbTransaction->commit();
        } catch (Exception $e) {
            \Yii::error("recharge approve failed", $e);
            $dbTransaction->rollback();
            return '审核失败';
        }
        return null;
    }

    /**
     * @param $rechargeLog  static
     * @return string
     */
    private static function reject($rechargeLog)
    {
        $rechargeLog->status = RechargeLog::STATUS_REJECT;

        $db = $rechargeLog->getDb();
        $dbTransaction = $db->beginTransaction();
        try {
            $rechargeLog->update();

            $dbTransaction->commit();
        } catch (Exception $e) {
            \Yii::error("recharge approve failed");
            $dbTransaction->rollback();
            return '审核失败';
        }
        return null;
    }

    /**
     * @param $rechargeId     integer   审核单子ID
     * @param $status         integer   申请状态
     * @return string 返回为空，代表操作成功，否则表示失败
     */
    public static function recharge($rechargeId, $status)
    {
        $rechargeLog = RechargeLog::findOne(['id' => $rechargeId, 'status' => static::STATUS_CHECKING]);
        if ($rechargeLog == null) {
            return '重置单号不存在或者已经被处理过';
        }
        if ($status == static::STATUS_APPROVE) {
            return static::approve($rechargeLog);
        } elseif ($status == static::STATUS_REJECT) {
            return static::reject($rechargeLog);
        }
        return '重置申请状态错误';
    }

    public static function create($userId, $amount) {
        $model = new RechargeLog();
        $model->user_id = $userId;
        $model->amount = $amount;
        $model->create_time = time();
        $model->status = static::STATUS_CHECKING;
        return $model;
    }
}
